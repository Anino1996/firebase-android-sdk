// Signature format: 2.0
package com.google.firebase.firestore.ktx {

  public final class FirestoreKt {
    ctor public FirestoreKt();
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestore firestore(@NonNull com.google.firebase.ktx.Firebase, @NonNull com.google.firebase.FirebaseApp app);
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestoreSettings firestoreSettings(@NonNull kotlin.jvm.functions.Function1<? super com.google.firebase.firestore.FirebaseFirestoreSettings.Builder,kotlin.Unit> init);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull String field);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull String field, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull com.google.firebase.firestore.FieldPath fieldPath);
    method @Nullable public static inline <reified T> T getField(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull com.google.firebase.firestore.FieldPath fieldPath, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @NonNull public static com.google.firebase.firestore.FirebaseFirestore getFirestore(@NonNull com.google.firebase.ktx.Firebase);
    method @Nullable public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.DocumentSnapshot);
    method @Nullable public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.DocumentSnapshot, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @NonNull public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.QueryDocumentSnapshot);
    method @NonNull public static inline <reified T> T toObject(@NonNull com.google.firebase.firestore.QueryDocumentSnapshot, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
    method @NonNull public static inline <reified T> java.util.List<T> toObjects(@NonNull com.google.firebase.firestore.QuerySnapshot);
    method @NonNull public static inline <reified T> java.util.List<T> toObjects(@NonNull com.google.firebase.firestore.QuerySnapshot, @NonNull com.google.firebase.firestore.DocumentSnapshot.ServerTimestampBehavior serverTimestampBehavior);
  }

}

package com.google.firebase.firestore.ktx.annotations {

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.PROPERTY) public @interface KDocumentId {
  }

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.CLASS) public @interface KIgnoreExtraProperties {
  }

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.PROPERTY) public @interface KServerTimestamp {
  }

  @kotlin.annotation.Retention(AnnotationRetention.RUNTIME) @kotlin.annotation.Target(allowedTargets=AnnotationTarget.CLASS) public @interface KThrowOnExtraProperties {
  }

}

package com.google.firebase.firestore.ktx.serialization {

  public final class FirestoreListEncoder extends kotlinx.serialization.encoding.AbstractEncoder {
    ctor public FirestoreListEncoder(@NonNull java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>> map, int depth, @NonNull java.util.List<java.lang.Object> encodedList);
    ctor public FirestoreListEncoder();
    method public <T> void encodeFirestoreNativeDataType(@Nullable T value);
    method @NonNull public kotlinx.serialization.modules.SerializersModule getSerializersModule();
    property @NonNull public kotlinx.serialization.modules.SerializersModule serializersModule;
  }

  public final class FirestoreMapEncoder extends kotlinx.serialization.encoding.AbstractEncoder {
    ctor public FirestoreMapEncoder(@NonNull java.util.Map<java.lang.Integer,java.util.Map<java.lang.String,java.lang.Object>> map, int depth, @Nullable kotlinx.serialization.descriptors.SerialDescriptor descriptor);
    ctor public FirestoreMapEncoder();
    method public <T> void encodeFirestoreNativeDataType(@Nullable T value);
    method @NonNull public kotlinx.serialization.modules.SerializersModule getSerializersModule();
    method public error.NonExistentClass serializedResult();
    property @NonNull public kotlinx.serialization.modules.SerializersModule serializersModule;
    field public static final com.google.firebase.firestore.ktx.serialization.FirestoreMapEncoder.Companion Companion;
  }

  public static final class FirestoreMapEncoder.Companion {
  }

  public final class FirestoreMapEncoderKt {
    ctor public FirestoreMapEncoderKt();
    method @NonNull public static <T> java.util.Map<java.lang.String,java.lang.Object> encodeToMap(@NonNull kotlinx.serialization.SerializationStrategy<? super T> serializer, @Nullable T value);
    method @NonNull public static inline <reified T> java.util.Map<java.lang.String,java.lang.Object> encodeToMap(@Nullable T value);
  }

  public final class MapEncoderKtxImp implements com.google.firebase.firestore.encoding.MapEncoder {
    ctor public MapEncoderKtxImp();
    method @NonNull public com.google.firebase.components.Component<?> create();
    method @NonNull public java.util.Map<java.lang.String,java.lang.Object> encode(@NonNull Object value);
    method public <T> boolean supports(@NonNull Class<T> valueType);
  }

}

package com.google.firebase.firestore.ktx.serializers {

  public final class FirestoreDatatypeSerializersKt {
    ctor public FirestoreDatatypeSerializersKt();
    method @NonNull public static kotlinx.serialization.modules.SerializersModule getFirestoreSerializersModule();
  }

}

