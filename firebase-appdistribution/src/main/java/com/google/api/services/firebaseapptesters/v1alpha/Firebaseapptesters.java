/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapptesters.v1alpha;

/**
 * Service definition for Firebaseapptesters (v1alpha).
 *
 * <p>
 * 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com/products/app-distribution" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseapptestersRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Firebaseapptesters extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.25.0-SNAPSHOT of the Firebase App Testers API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebaseapptesters.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Firebaseapptesters(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Firebaseapptesters(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Devices collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
   *   {@code Firebaseapptesters.Devices.List request = firebaseapptesters.devices().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Devices devices() {
    return new Devices();
  }

  /**
   * The "devices" collection of methods.
   */
  public class Devices {

    /**
     * Creates a device
     *
     * Create a request for the method "devices.create".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice}
     * @return the request
     */
    public Create create(com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice> {

      private static final String REST_PATH = "v1alpha/devices";

      /**
       * Creates a device
       *
       * Create a request for the method "devices.create".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Create#execute()} method to invoke the remote
       * operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice}
       * @since 1.13
       */
      protected Create(com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice content) {
        super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice.class);
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Get a single device
     *
     * Create a request for the method "devices.get".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param name Required. The name of the device to retrieve Format: devices/{device}
     * @return the request
     */
    public Get get(java.lang.String name) throws java.io.IOException {
      Get result = new Get(name);
      initialize(result);
      return result;
    }

    public class Get extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice> {

      private static final String REST_PATH = "v1alpha/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^devices/[^/]+$");

      /**
       * Get a single device
       *
       * Create a request for the method "devices.get".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       * <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the device to retrieve Format: devices/{device}
       * @since 1.13
       */
      protected Get(java.lang.String name) {
        super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaDevice.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^devices/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The name of the device to retrieve Format: devices/{device} */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the device to retrieve Format: devices/{device}
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The name of the device to retrieve Format: devices/{device} */
      public Get setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^devices/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Get a list of devices for a tester A device represents a physical device that is used by a tester
     * to test an app. Testers can use multiple devices to test apps. For each device a tester uses, the
     * tester must consent to sharing the device's data for an app in order to view that app's releases.
     * This is required for iOS apps. Specifically, for iOS apps with Ad-hoc distributions, we need to
     * access the devices UUID to determine if the release can be downloaded on the tester's device.
     * Devices are parents of apps because the device that a tester is using affects the values of
     * fields in the App and Release messages.
     *
     * Create a request for the method "devices.list".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListDevicesResponse> {

      private static final String REST_PATH = "v1alpha/devices";

      /**
       * Get a list of devices for a tester A device represents a physical device that is used by a
       * tester to test an app. Testers can use multiple devices to test apps. For each device a tester
       * uses, the tester must consent to sharing the device's data for an app in order to view that
       * app's releases. This is required for iOS apps. Specifically, for iOS apps with Ad-hoc
       * distributions, we need to access the devices UUID to determine if the release can be downloaded
       * on the tester's device. Devices are parents of apps because the device that a tester is using
       * affects the values of fields in the App and Release messages.
       *
       * Create a request for the method "devices.list".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       * <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListDevicesResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /** Maximum number of devices to return */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** Maximum number of devices to return
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /** Maximum number of devices to return */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /** Page token received from previous ListDevices call */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Page token received from previous ListDevices call
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Page token received from previous ListDevices call */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the TesterApps collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
     *   {@code Firebaseapptesters.TesterApps.List request = firebaseapptesters.testerApps().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public TesterApps testerApps() {
      return new TesterApps();
    }

    /**
     * The "testerApps" collection of methods.
     */
    public class TesterApps {

      /**
       * Consent to share the device's data for an app Testers are required to consent to having the
       * device's data shared for the app in order to view the app's releases.
       *
       * Create a request for the method "testerApps.consent".
       *
       * This request holds the parameters needed by the firebaseapptesters server.  After setting any
       * optional parameters, call the {@link Consent#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the app Format: devices/{devices}/testerApps/{tester_app}
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaConsentAppRequest}
       * @return the request
       */
      public Consent consent(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaConsentAppRequest content) throws java.io.IOException {
        Consent result = new Consent(name, content);
        initialize(result);
        return result;
      }

      public class Consent extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaConsentAppResponse> {

        private static final String REST_PATH = "v1alpha/{+name}:consent";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^devices/[^/]+/testerApps/[^/]+$");

        /**
         * Consent to share the device's data for an app Testers are required to consent to having the
         * device's data shared for the app in order to view the app's releases.
         *
         * Create a request for the method "testerApps.consent".
         *
         * This request holds the parameters needed by the the firebaseapptesters server.  After setting
         * any optional parameters, call the {@link Consent#execute()} method to invoke the remote
         * operation. <p> {@link
         * Consent#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the app Format: devices/{devices}/testerApps/{tester_app}
         * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaConsentAppRequest}
         * @since 1.13
         */
        protected Consent(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaConsentAppRequest content) {
          super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaConsentAppResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^devices/[^/]+/testerApps/[^/]+$");
          }
        }

        @Override
        public Consent set$Xgafv(java.lang.String $Xgafv) {
          return (Consent) super.set$Xgafv($Xgafv);
        }

        @Override
        public Consent setAccessToken(java.lang.String accessToken) {
          return (Consent) super.setAccessToken(accessToken);
        }

        @Override
        public Consent setAlt(java.lang.String alt) {
          return (Consent) super.setAlt(alt);
        }

        @Override
        public Consent setCallback(java.lang.String callback) {
          return (Consent) super.setCallback(callback);
        }

        @Override
        public Consent setFields(java.lang.String fields) {
          return (Consent) super.setFields(fields);
        }

        @Override
        public Consent setKey(java.lang.String key) {
          return (Consent) super.setKey(key);
        }

        @Override
        public Consent setOauthToken(java.lang.String oauthToken) {
          return (Consent) super.setOauthToken(oauthToken);
        }

        @Override
        public Consent setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Consent) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Consent setQuotaUser(java.lang.String quotaUser) {
          return (Consent) super.setQuotaUser(quotaUser);
        }

        @Override
        public Consent setUploadType(java.lang.String uploadType) {
          return (Consent) super.setUploadType(uploadType);
        }

        @Override
        public Consent setUploadProtocol(java.lang.String uploadProtocol) {
          return (Consent) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The name of the app Format: devices/{devices}/testerApps/{tester_app} */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the app Format: devices/{devices}/testerApps/{tester_app}
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The name of the app Format: devices/{devices}/testerApps/{tester_app} */
        public Consent setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^devices/[^/]+/testerApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Consent set(String parameterName, Object value) {
          return (Consent) super.set(parameterName, value);
        }
      }
      /**
       * Leave a particular app that a tester has access to
       *
       * Create a request for the method "testerApps.delete".
       *
       * This request holds the parameters needed by the firebaseapptesters server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the app Format: devices/{devices}/testerApps/{tester_app}
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty> {

        private static final String REST_PATH = "v1alpha/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^devices/[^/]+/testerApps/[^/]+$");

        /**
         * Leave a particular app that a tester has access to
         *
         * Create a request for the method "testerApps.delete".
         *
         * This request holds the parameters needed by the the firebaseapptesters server.  After setting
         * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
         * operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the app Format: devices/{devices}/testerApps/{tester_app}
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(Firebaseapptesters.this, "DELETE", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^devices/[^/]+/testerApps/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The name of the app Format: devices/{devices}/testerApps/{tester_app} */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the app Format: devices/{devices}/testerApps/{tester_app}
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The name of the app Format: devices/{devices}/testerApps/{tester_app} */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^devices/[^/]+/testerApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Get a single app for a device
       *
       * Create a request for the method "testerApps.get".
       *
       * This request holds the parameters needed by the firebaseapptesters server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the tester app to retrieve Format: devices/{device}/testerApps/{tester_app}
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterApp> {

        private static final String REST_PATH = "v1alpha/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^devices/[^/]+/testerApps/[^/]+$");

        /**
         * Get a single app for a device
         *
         * Create a request for the method "testerApps.get".
         *
         * This request holds the parameters needed by the the firebaseapptesters server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the tester app to retrieve Format: devices/{device}/testerApps/{tester_app}
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterApp.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^devices/[^/]+/testerApps/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the tester app to retrieve Format:
         * devices/{device}/testerApps/{tester_app}
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the tester app to retrieve Format: devices/{device}/testerApps/{tester_app}
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the tester app to retrieve Format:
         * devices/{device}/testerApps/{tester_app}
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^devices/[^/]+/testerApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Get a list of apps for a device
       *
       * Create a request for the method "testerApps.list".
       *
       * This request holds the parameters needed by the firebaseapptesters server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent, which owns the app Format: devices/{device}
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListTesterAppsResponse> {

        private static final String REST_PATH = "v1alpha/{+parent}/testerApps";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^devices/[^/]+$");

        /**
         * Get a list of apps for a device
         *
         * Create a request for the method "testerApps.list".
         *
         * This request holds the parameters needed by the the firebaseapptesters server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent, which owns the app Format: devices/{device}
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListTesterAppsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^devices/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The parent, which owns the app Format: devices/{device} */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent, which owns the app Format: devices/{device}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The parent, which owns the app Format: devices/{device} */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^devices/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** Maximum number of apps to return */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of apps to return
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** Maximum number of apps to return */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** Page token received from previous ListTesterApps calld */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Page token received from previous ListTesterApps calld
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** Page token received from previous ListTesterApps calld */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Installations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
       *   {@code Firebaseapptesters.Installations.List request = firebaseapptesters.installations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Installations installations() {
        return new Installations();
      }

      /**
       * The "installations" collection of methods.
       */
      public class Installations {

        /**
         * An accessor for creating requests from the Releases collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
         *   {@code Firebaseapptesters.Releases.List request = firebaseapptesters.releases().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Releases releases() {
          return new Releases();
        }

        /**
         * The "releases" collection of methods.
         */
        public class Releases {

          /**
           * List releases for an app by firebase installation id (FID)
           *
           * Create a request for the method "releases.list".
           *
           * This request holds the parameters needed by the firebaseapptesters server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent, which owns the collection of installation releases Format:
           *        projects/{project}/installations/{installation} Format: deprecated
           *        devices/{devices}/testerApps/{tester_app}/installations/{installation}
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListTesterAppInstallationReleasesResponse> {

            private static final String REST_PATH = "v1alpha/{+parent}/releases";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^devices/[^/]+/testerApps/[^/]+/installations/[^/]+$");

            /**
             * List releases for an app by firebase installation id (FID)
             *
             * Create a request for the method "releases.list".
             *
             * This request holds the parameters needed by the the firebaseapptesters server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent, which owns the collection of installation releases Format:
           *        projects/{project}/installations/{installation} Format: deprecated
           *        devices/{devices}/testerApps/{tester_app}/installations/{installation}
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListTesterAppInstallationReleasesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^devices/[^/]+/testerApps/[^/]+/installations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent, which owns the collection of installation releases Format:
             * projects/{project}/installations/{installation} Format: deprecated
             * devices/{devices}/testerApps/{tester_app}/installations/{installation}
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent, which owns the collection of installation releases Format:
           projects/{project}/installations/{installation} Format: deprecated
           devices/{devices}/testerApps/{tester_app}/installations/{installation}
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent, which owns the collection of installation releases Format:
             * projects/{project}/installations/{installation} Format: deprecated
             * devices/{devices}/testerApps/{tester_app}/installations/{installation}
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^devices/[^/]+/testerApps/[^/]+/installations/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Maximum number of releases to return */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Maximum number of releases to return
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Maximum number of releases to return */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** Page token received from previous ListDevices call */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Page token received from previous ListDevices call
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** Page token received from previous ListDevices call */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the Releases collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
       *   {@code Firebaseapptesters.Releases.List request = firebaseapptesters.releases().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Releases releases() {
        return new Releases();
      }

      /**
       * The "releases" collection of methods.
       */
      public class Releases {

        /**
         * Download a release This endpoint is authenticated with the token query param. To make a request
         * to this endpoint, use the URL returned by ListReleases, in the download_url field on each
         * Release, which contains an expiring token that validates calls using that URL only.
         *
         * Create a request for the method "releases.download".
         *
         * This request holds the parameters needed by the firebaseapptesters server.  After setting any
         * optional parameters, call the {@link Download#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the release to download Format:
         *        devices/{device}/testerApps/{tester_app}/releases/{release}
         * @return the request
         */
        public Download download(java.lang.String name) throws java.io.IOException {
          Download result = new Download(name);
          initialize(result);
          return result;
        }

        public class Download extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleApiHttpBody> {

          private static final String REST_PATH = "v1alpha/{+name}:download";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^devices/[^/]+/testerApps/[^/]+/releases/[^/]+$");

          /**
           * Download a release This endpoint is authenticated with the token query param. To make a request
           * to this endpoint, use the URL returned by ListReleases, in the download_url field on each
           * Release, which contains an expiring token that validates calls using that URL only.
           *
           * Create a request for the method "releases.download".
           *
           * This request holds the parameters needed by the the firebaseapptesters server.  After setting
           * any optional parameters, call the {@link Download#execute()} method to invoke the remote
           * operation. <p> {@link
           * Download#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the release to download Format:
         *        devices/{device}/testerApps/{tester_app}/releases/{release}
           * @since 1.13
           */
          protected Download(java.lang.String name) {
            super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleApiHttpBody.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^devices/[^/]+/testerApps/[^/]+/releases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Download set$Xgafv(java.lang.String $Xgafv) {
            return (Download) super.set$Xgafv($Xgafv);
          }

          @Override
          public Download setAccessToken(java.lang.String accessToken) {
            return (Download) super.setAccessToken(accessToken);
          }

          @Override
          public Download setAlt(java.lang.String alt) {
            return (Download) super.setAlt(alt);
          }

          @Override
          public Download setCallback(java.lang.String callback) {
            return (Download) super.setCallback(callback);
          }

          @Override
          public Download setFields(java.lang.String fields) {
            return (Download) super.setFields(fields);
          }

          @Override
          public Download setKey(java.lang.String key) {
            return (Download) super.setKey(key);
          }

          @Override
          public Download setOauthToken(java.lang.String oauthToken) {
            return (Download) super.setOauthToken(oauthToken);
          }

          @Override
          public Download setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Download) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Download setQuotaUser(java.lang.String quotaUser) {
            return (Download) super.setQuotaUser(quotaUser);
          }

          @Override
          public Download setUploadType(java.lang.String uploadType) {
            return (Download) super.setUploadType(uploadType);
          }

          @Override
          public Download setUploadProtocol(java.lang.String uploadProtocol) {
            return (Download) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the release to download Format:
           * devices/{device}/testerApps/{tester_app}/releases/{release}
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the release to download Format:
         devices/{device}/testerApps/{tester_app}/releases/{release}
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the release to download Format:
           * devices/{device}/testerApps/{tester_app}/releases/{release}
           */
          public Download setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^devices/[^/]+/testerApps/[^/]+/releases/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A temporary signed token verifying the URL This is set in DownloadUrlCreator
           * and validated in DownloadReleaseAction using RequestUrlVerifier
           */
          @com.google.api.client.util.Key
          private java.lang.String token;

          /** Required. A temporary signed token verifying the URL This is set in DownloadUrlCreator and
         validated in DownloadReleaseAction using RequestUrlVerifier
           */
          public java.lang.String getToken() {
            return token;
          }

          /**
           * Required. A temporary signed token verifying the URL This is set in DownloadUrlCreator
           * and validated in DownloadReleaseAction using RequestUrlVerifier
           */
          public Download setToken(java.lang.String token) {
            this.token = token;
            return this;
          }

          /** The tester client which this download request is coming from */
          @com.google.api.client.util.Key
          private java.lang.String testerClient;

          /** The tester client which this download request is coming from
           */
          public java.lang.String getTesterClient() {
            return testerClient;
          }

          /** The tester client which this download request is coming from */
          public Download setTesterClient(java.lang.String testerClient) {
            this.testerClient = testerClient;
            return this;
          }

          @Override
          public Download set(String parameterName, Object value) {
            return (Download) super.set(parameterName, value);
          }
        }
        /**
         * Get a single release for the app
         *
         * Create a request for the method "releases.get".
         *
         * This request holds the parameters needed by the firebaseapptesters server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the release to retrieve Format:
         *        devices/{device}/testerApps/{tester_app}/releases/{release}
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaRelease> {

          private static final String REST_PATH = "v1alpha/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^devices/[^/]+/testerApps/[^/]+/releases/[^/]+$");

          /**
           * Get a single release for the app
           *
           * Create a request for the method "releases.get".
           *
           * This request holds the parameters needed by the the firebaseapptesters server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the release to retrieve Format:
         *        devices/{device}/testerApps/{tester_app}/releases/{release}
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaRelease.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^devices/[^/]+/testerApps/[^/]+/releases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the release to retrieve Format:
           * devices/{device}/testerApps/{tester_app}/releases/{release}
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the release to retrieve Format:
         devices/{device}/testerApps/{tester_app}/releases/{release}
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the release to retrieve Format:
           * devices/{device}/testerApps/{tester_app}/releases/{release}
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^devices/[^/]+/testerApps/[^/]+/releases/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The tester client which this download request is coming from */
          @com.google.api.client.util.Key
          private java.lang.String testerClient;

          /** The tester client which this download request is coming from
           */
          public java.lang.String getTesterClient() {
            return testerClient;
          }

          /** The tester client which this download request is coming from */
          public Get setTesterClient(java.lang.String testerClient) {
            this.testerClient = testerClient;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * List releases for the app
         *
         * Create a request for the method "releases.list".
         *
         * This request holds the parameters needed by the firebaseapptesters server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent, which owns the collection of releases Format:
         *        devices/{devices}/testerApps/{tester_app}
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListReleasesResponse> {

          private static final String REST_PATH = "v1alpha/{+parent}/releases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^devices/[^/]+/testerApps/[^/]+$");

          /**
           * List releases for the app
           *
           * Create a request for the method "releases.list".
           *
           * This request holds the parameters needed by the the firebaseapptesters server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent, which owns the collection of releases Format:
         *        devices/{devices}/testerApps/{tester_app}
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListReleasesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^devices/[^/]+/testerApps/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent, which owns the collection of releases Format:
           * devices/{devices}/testerApps/{tester_app}
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent, which owns the collection of releases Format:
         devices/{devices}/testerApps/{tester_app}
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent, which owns the collection of releases Format:
           * devices/{devices}/testerApps/{tester_app}
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^devices/[^/]+/testerApps/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Maximum number of releases to return */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Maximum number of releases to return
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Maximum number of releases to return */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Page token received from previous `ListReleases` call */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Page token received from previous `ListReleases` call
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Page token received from previous `ListReleases` call */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /** Filter for the list of releases. Used in search. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Filter for the list of releases. Used in search.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Filter for the list of releases. Used in search. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The tester client which this download request is coming from */
          @com.google.api.client.util.Key
          private java.lang.String testerClient;

          /** The tester client which this download request is coming from
           */
          public java.lang.String getTesterClient() {
            return testerClient;
          }

          /** The tester client which this download request is coming from */
          public List setTesterClient(java.lang.String testerClient) {
            this.testerClient = testerClient;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * An accessor for creating requests from the Invitations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
   *   {@code Firebaseapptesters.Invitations.List request = firebaseapptesters.invitations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Invitations invitations() {
    return new Invitations();
  }

  /**
   * The "invitations" collection of methods.
   */
  public class Invitations {

    /**
     * Get invitation for tester. Invitations are created by Developers or by testers via invite links.
     * Invitations link an email address to an app.
     *
     * Create a request for the method "invitations.get".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param name Required. The name of the app to retrieve Format: invitations/{invitation}
     * @return the request
     */
    public Get get(java.lang.String name) throws java.io.IOException {
      Get result = new Get(name);
      initialize(result);
      return result;
    }

    public class Get extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaInvitation> {

      private static final String REST_PATH = "v1alpha/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^invitations/[^/]+$");

      /**
       * Get invitation for tester. Invitations are created by Developers or by testers via invite
       * links. Invitations link an email address to an app.
       *
       * Create a request for the method "invitations.get".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       * <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the app to retrieve Format: invitations/{invitation}
       * @since 1.13
       */
      protected Get(java.lang.String name) {
        super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaInvitation.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^invitations/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The name of the app to retrieve Format: invitations/{invitation} */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the app to retrieve Format: invitations/{invitation}
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The name of the app to retrieve Format: invitations/{invitation} */
      public Get setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^invitations/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Subscribe to invitation Testers use this method to update the subscription status for the email
     * address that is associated with the invitation.
     *
     * Create a request for the method "invitations.subscribe".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Subscribe#execute()} method to invoke the remote operation.
     *
     * @param name Required. The name of the invitation Format: invitations/{invitation}
     * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaSubscribeInvitationRequest}
     * @return the request
     */
    public Subscribe subscribe(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaSubscribeInvitationRequest content) throws java.io.IOException {
      Subscribe result = new Subscribe(name, content);
      initialize(result);
      return result;
    }

    public class Subscribe extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty> {

      private static final String REST_PATH = "v1alpha/{+name}:subscribe";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^invitations/[^/]+$");

      /**
       * Subscribe to invitation Testers use this method to update the subscription status for the email
       * address that is associated with the invitation.
       *
       * Create a request for the method "invitations.subscribe".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Subscribe#execute()} method to invoke the remote
       * operation. <p> {@link
       * Subscribe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the invitation Format: invitations/{invitation}
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaSubscribeInvitationRequest}
       * @since 1.13
       */
      protected Subscribe(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaSubscribeInvitationRequest content) {
        super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^invitations/[^/]+$");
        }
      }

      @Override
      public Subscribe set$Xgafv(java.lang.String $Xgafv) {
        return (Subscribe) super.set$Xgafv($Xgafv);
      }

      @Override
      public Subscribe setAccessToken(java.lang.String accessToken) {
        return (Subscribe) super.setAccessToken(accessToken);
      }

      @Override
      public Subscribe setAlt(java.lang.String alt) {
        return (Subscribe) super.setAlt(alt);
      }

      @Override
      public Subscribe setCallback(java.lang.String callback) {
        return (Subscribe) super.setCallback(callback);
      }

      @Override
      public Subscribe setFields(java.lang.String fields) {
        return (Subscribe) super.setFields(fields);
      }

      @Override
      public Subscribe setKey(java.lang.String key) {
        return (Subscribe) super.setKey(key);
      }

      @Override
      public Subscribe setOauthToken(java.lang.String oauthToken) {
        return (Subscribe) super.setOauthToken(oauthToken);
      }

      @Override
      public Subscribe setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Subscribe) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Subscribe setQuotaUser(java.lang.String quotaUser) {
        return (Subscribe) super.setQuotaUser(quotaUser);
      }

      @Override
      public Subscribe setUploadType(java.lang.String uploadType) {
        return (Subscribe) super.setUploadType(uploadType);
      }

      @Override
      public Subscribe setUploadProtocol(java.lang.String uploadProtocol) {
        return (Subscribe) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The name of the invitation Format: invitations/{invitation} */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the invitation Format: invitations/{invitation}
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The name of the invitation Format: invitations/{invitation} */
      public Subscribe setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^invitations/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Subscribe set(String parameterName, Object value) {
        return (Subscribe) super.set(parameterName, value);
      }
    }
    /**
     * Unsubscribe from invitation Testers use this method to update the unsubscription status for the
     * email address that is associated with the invitation.
     *
     * Create a request for the method "invitations.unsubscribe".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Unsubscribe#execute()} method to invoke the remote
     * operation.
     *
     * @param name Required. The name of the invitation Format: invitations/{invitation}
     * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUnsubscribeInvitationRequest}
     * @return the request
     */
    public Unsubscribe unsubscribe(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUnsubscribeInvitationRequest content) throws java.io.IOException {
      Unsubscribe result = new Unsubscribe(name, content);
      initialize(result);
      return result;
    }

    public class Unsubscribe extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty> {

      private static final String REST_PATH = "v1alpha/{+name}:unsubscribe";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^invitations/[^/]+$");

      /**
       * Unsubscribe from invitation Testers use this method to update the unsubscription status for the
       * email address that is associated with the invitation.
       *
       * Create a request for the method "invitations.unsubscribe".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Unsubscribe#execute()} method to invoke the remote
       * operation. <p> {@link
       * Unsubscribe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the invitation Format: invitations/{invitation}
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUnsubscribeInvitationRequest}
       * @since 1.13
       */
      protected Unsubscribe(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUnsubscribeInvitationRequest content) {
        super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^invitations/[^/]+$");
        }
      }

      @Override
      public Unsubscribe set$Xgafv(java.lang.String $Xgafv) {
        return (Unsubscribe) super.set$Xgafv($Xgafv);
      }

      @Override
      public Unsubscribe setAccessToken(java.lang.String accessToken) {
        return (Unsubscribe) super.setAccessToken(accessToken);
      }

      @Override
      public Unsubscribe setAlt(java.lang.String alt) {
        return (Unsubscribe) super.setAlt(alt);
      }

      @Override
      public Unsubscribe setCallback(java.lang.String callback) {
        return (Unsubscribe) super.setCallback(callback);
      }

      @Override
      public Unsubscribe setFields(java.lang.String fields) {
        return (Unsubscribe) super.setFields(fields);
      }

      @Override
      public Unsubscribe setKey(java.lang.String key) {
        return (Unsubscribe) super.setKey(key);
      }

      @Override
      public Unsubscribe setOauthToken(java.lang.String oauthToken) {
        return (Unsubscribe) super.setOauthToken(oauthToken);
      }

      @Override
      public Unsubscribe setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Unsubscribe) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Unsubscribe setQuotaUser(java.lang.String quotaUser) {
        return (Unsubscribe) super.setQuotaUser(quotaUser);
      }

      @Override
      public Unsubscribe setUploadType(java.lang.String uploadType) {
        return (Unsubscribe) super.setUploadType(uploadType);
      }

      @Override
      public Unsubscribe setUploadProtocol(java.lang.String uploadProtocol) {
        return (Unsubscribe) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The name of the invitation Format: invitations/{invitation} */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the invitation Format: invitations/{invitation}
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The name of the invitation Format: invitations/{invitation} */
      public Unsubscribe setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^invitations/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Unsubscribe set(String parameterName, Object value) {
        return (Unsubscribe) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the InviteLinks collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
   *   {@code Firebaseapptesters.InviteLinks.List request = firebaseapptesters.inviteLinks().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public InviteLinks inviteLinks() {
    return new InviteLinks();
  }

  /**
   * The "inviteLinks" collection of methods.
   */
  public class InviteLinks {

    /**
     * Accepts an invite link for an app When a tester accepts an invite link, an invitation is created
     * and an email is sent
     *
     * Create a request for the method "inviteLinks.accept".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Accept#execute()} method to invoke the remote operation.
     *
     * @param name Required. The name of the invite link Format: inviteLinks/{invite_link}
     * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaAcceptInviteLinkRequest}
     * @return the request
     */
    public Accept accept(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaAcceptInviteLinkRequest content) throws java.io.IOException {
      Accept result = new Accept(name, content);
      initialize(result);
      return result;
    }

    public class Accept extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaAcceptInviteLinkResponse> {

      private static final String REST_PATH = "v1alpha/{+name}:accept";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^inviteLinks/[^/]+$");

      /**
       * Accepts an invite link for an app When a tester accepts an invite link, an invitation is
       * created and an email is sent
       *
       * Create a request for the method "inviteLinks.accept".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Accept#execute()} method to invoke the remote
       * operation. <p> {@link
       * Accept#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the invite link Format: inviteLinks/{invite_link}
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaAcceptInviteLinkRequest}
       * @since 1.13
       */
      protected Accept(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaAcceptInviteLinkRequest content) {
        super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaAcceptInviteLinkResponse.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^inviteLinks/[^/]+$");
        }
      }

      @Override
      public Accept set$Xgafv(java.lang.String $Xgafv) {
        return (Accept) super.set$Xgafv($Xgafv);
      }

      @Override
      public Accept setAccessToken(java.lang.String accessToken) {
        return (Accept) super.setAccessToken(accessToken);
      }

      @Override
      public Accept setAlt(java.lang.String alt) {
        return (Accept) super.setAlt(alt);
      }

      @Override
      public Accept setCallback(java.lang.String callback) {
        return (Accept) super.setCallback(callback);
      }

      @Override
      public Accept setFields(java.lang.String fields) {
        return (Accept) super.setFields(fields);
      }

      @Override
      public Accept setKey(java.lang.String key) {
        return (Accept) super.setKey(key);
      }

      @Override
      public Accept setOauthToken(java.lang.String oauthToken) {
        return (Accept) super.setOauthToken(oauthToken);
      }

      @Override
      public Accept setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Accept) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Accept setQuotaUser(java.lang.String quotaUser) {
        return (Accept) super.setQuotaUser(quotaUser);
      }

      @Override
      public Accept setUploadType(java.lang.String uploadType) {
        return (Accept) super.setUploadType(uploadType);
      }

      @Override
      public Accept setUploadProtocol(java.lang.String uploadProtocol) {
        return (Accept) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The name of the invite link Format: inviteLinks/{invite_link} */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the invite link Format: inviteLinks/{invite_link}
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The name of the invite link Format: inviteLinks/{invite_link} */
      public Accept setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^inviteLinks/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Accept set(String parameterName, Object value) {
        return (Accept) super.set(parameterName, value);
      }
    }
    /**
     * Get invite link. Invite links are created by developers. Developers can send a single link to
     * multiple testers versus inviting testers one by one. Testers can use invite links to invite
     * themselves to test an app.
     *
     * Create a request for the method "inviteLinks.get".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param name Required. The name of the invite link to retrieve Format: inviteLinks/{invite_link}
     * @return the request
     */
    public Get get(java.lang.String name) throws java.io.IOException {
      Get result = new Get(name);
      initialize(result);
      return result;
    }

    public class Get extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaInviteLink> {

      private static final String REST_PATH = "v1alpha/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^inviteLinks/[^/]+$");

      /**
       * Get invite link. Invite links are created by developers. Developers can send a single link to
       * multiple testers versus inviting testers one by one. Testers can use invite links to invite
       * themselves to test an app.
       *
       * Create a request for the method "inviteLinks.get".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       * <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the invite link to retrieve Format: inviteLinks/{invite_link}
       * @since 1.13
       */
      protected Get(java.lang.String name) {
        super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaInviteLink.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^inviteLinks/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. The name of the invite link to retrieve Format: inviteLinks/{invite_link} */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the invite link to retrieve Format: inviteLinks/{invite_link}
       */
      public java.lang.String getName() {
        return name;
      }

      /** Required. The name of the invite link to retrieve Format: inviteLinks/{invite_link} */
      public Get setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^inviteLinks/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Media collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
   *   {@code Firebaseapptesters.Media.List request = firebaseapptesters.media().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Media media() {
    return new Media();
  }

  /**
   * The "media" collection of methods.
   */
  public class Media {

    /**
     * Uploads a feedback artifact
     *
     * Create a request for the method "media.upload".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * @param feedback The name of the feedback. Format:
     *        projects/{project}/installations/{installation}/releases/{release}/feedback/{feedback}
     * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest}
     * @return the request
     */
    public Upload upload(java.lang.String feedback, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest content) throws java.io.IOException {
      Upload result = new Upload(feedback, content);
      initialize(result);
      return result;
    }

    /**
     * Uploads a feedback artifact
     *
     * Create a request for the method "media.upload".
     *
     * This request holds the parameters needed by the the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param feedback The name of the feedback. Format:
     *        projects/{project}/installations/{installation}/releases/{release}/feedback/{feedback}
     * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Upload upload(java.lang.String feedback, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Upload result = new Upload(feedback, content, mediaContent);
      initialize(result);
      return result;
    }

    public class Upload extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactResponse> {

      private static final String REST_PATH = "v1alpha/{+feedback}:uploadArtifact";

      private final java.util.regex.Pattern FEEDBACK_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/installations/[^/]+/releases/[^/]+/feedback/[^/]+$");

      /**
       * Uploads a feedback artifact
       *
       * Create a request for the method "media.upload".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Upload#execute()} method to invoke the remote
       * operation. <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param feedback The name of the feedback. Format:
     *        projects/{project}/installations/{installation}/releases/{release}/feedback/{feedback}
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest}
       * @since 1.13
       */
      protected Upload(java.lang.String feedback, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest content) {
        super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactResponse.class);
        this.feedback = com.google.api.client.util.Preconditions.checkNotNull(feedback, "Required parameter feedback must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(FEEDBACK_PATTERN.matcher(feedback).matches(),
              "Parameter feedback must conform to the pattern " +
              "^projects/[^/]+/installations/[^/]+/releases/[^/]+/feedback/[^/]+$");
        }
      }

      /**
       * Uploads a feedback artifact
       *
       * Create a request for the method "media.upload".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link Upload#execute()} method to invoke the remote
       * operation. <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param feedback The name of the feedback. Format:
     *        projects/{project}/installations/{installation}/releases/{release}/feedback/{feedback}
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected Upload(java.lang.String feedback, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Firebaseapptesters.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaUploadArtifactResponse.class);
        this.feedback = com.google.api.client.util.Preconditions.checkNotNull(feedback, "Required parameter feedback must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Upload set$Xgafv(java.lang.String $Xgafv) {
        return (Upload) super.set$Xgafv($Xgafv);
      }

      @Override
      public Upload setAccessToken(java.lang.String accessToken) {
        return (Upload) super.setAccessToken(accessToken);
      }

      @Override
      public Upload setAlt(java.lang.String alt) {
        return (Upload) super.setAlt(alt);
      }

      @Override
      public Upload setCallback(java.lang.String callback) {
        return (Upload) super.setCallback(callback);
      }

      @Override
      public Upload setFields(java.lang.String fields) {
        return (Upload) super.setFields(fields);
      }

      @Override
      public Upload setKey(java.lang.String key) {
        return (Upload) super.setKey(key);
      }

      @Override
      public Upload setOauthToken(java.lang.String oauthToken) {
        return (Upload) super.setOauthToken(oauthToken);
      }

      @Override
      public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Upload) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Upload setQuotaUser(java.lang.String quotaUser) {
        return (Upload) super.setQuotaUser(quotaUser);
      }

      @Override
      public Upload setUploadType(java.lang.String uploadType) {
        return (Upload) super.setUploadType(uploadType);
      }

      @Override
      public Upload setUploadProtocol(java.lang.String uploadProtocol) {
        return (Upload) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The name of the feedback. Format:
       * projects/{project}/installations/{installation}/releases/{release}/feedback/{feedback}
       */
      @com.google.api.client.util.Key
      private java.lang.String feedback;

      /** The name of the feedback. Format:
     projects/{project}/installations/{installation}/releases/{release}/feedback/{feedback}
       */
      public java.lang.String getFeedback() {
        return feedback;
      }

      /**
       * The name of the feedback. Format:
       * projects/{project}/installations/{installation}/releases/{release}/feedback/{feedback}
       */
      public Upload setFeedback(java.lang.String feedback) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(FEEDBACK_PATTERN.matcher(feedback).matches(),
              "Parameter feedback must conform to the pattern " +
              "^projects/[^/]+/installations/[^/]+/releases/[^/]+/feedback/[^/]+$");
        }
        this.feedback = feedback;
        return this;
      }

      @Override
      public Upload set(String parameterName, Object value) {
        return (Upload) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
   *   {@code Firebaseapptesters.Projects.List request = firebaseapptesters.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Installations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
     *   {@code Firebaseapptesters.Installations.List request = firebaseapptesters.installations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Installations installations() {
      return new Installations();
    }

    /**
     * The "installations" collection of methods.
     */
    public class Installations {

      /**
       * Create a new TesterAppInstallation record to register a Firebase Installation ID with a specific
       * Tester to enable FID based auth from the SDK
       *
       * Create a request for the method "installations.create".
       *
       * This request holds the parameters needed by the firebaseapptesters server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent resource where this TesterAppInstallation will be created Format:
       *        projects/{project}
       * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterAppInstallation}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterAppInstallation content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterAppInstallation> {

        private static final String REST_PATH = "v1alpha/{+parent}/installations";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Create a new TesterAppInstallation record to register a Firebase Installation ID with a
         * specific Tester to enable FID based auth from the SDK
         *
         * Create a request for the method "installations.create".
         *
         * This request holds the parameters needed by the the firebaseapptesters server.  After setting
         * any optional parameters, call the {@link Create#execute()} method to invoke the remote
         * operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent resource where this TesterAppInstallation will be created Format:
       *        projects/{project}
         * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterAppInstallation}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterAppInstallation content) {
          super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaTesterAppInstallation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The parent resource where this TesterAppInstallation will be created Format:
         * projects/{project}
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent resource where this TesterAppInstallation will be created Format:
       projects/{project}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The parent resource where this TesterAppInstallation will be created Format:
         * projects/{project}
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** Required. The firebase installation id to register */
        @com.google.api.client.util.Key
        private java.lang.String fid;

        /** Required. The firebase installation id to register
         */
        public java.lang.String getFid() {
          return fid;
        }

        /** Required. The firebase installation id to register */
        public Create setFid(java.lang.String fid) {
          this.fid = fid;
          return this;
        }

        /** The app id to link to the installation id */
        @com.google.api.client.util.Key
        private java.lang.String testerAppId;

        /** The app id to link to the installation id
         */
        public java.lang.String getTesterAppId() {
          return testerAppId;
        }

        /** The app id to link to the installation id */
        public Create setTesterAppId(java.lang.String testerAppId) {
          this.testerAppId = testerAppId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Releases collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
       *   {@code Firebaseapptesters.Releases.List request = firebaseapptesters.releases().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Releases releases() {
        return new Releases();
      }

      /**
       * The "releases" collection of methods.
       */
      public class Releases {

        /**
         * Find a release based on binary identifiers available to the SDK on device
         *
         * Create a request for the method "releases.find".
         *
         * This request holds the parameters needed by the firebaseapptesters server.  After setting any
         * optional parameters, call the {@link Find#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent, which owns the collection of installation releases Format:
         *        projects/{project}/installations/{installation}
         * @return the request
         */
        public Find find(java.lang.String parent) throws java.io.IOException {
          Find result = new Find(parent);
          initialize(result);
          return result;
        }

        public class Find extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFindReleaseResponse> {

          private static final String REST_PATH = "v1alpha/{+parent}/releases:find";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/installations/[^/]+$");

          /**
           * Find a release based on binary identifiers available to the SDK on device
           *
           * Create a request for the method "releases.find".
           *
           * This request holds the parameters needed by the the firebaseapptesters server.  After setting
           * any optional parameters, call the {@link Find#execute()} method to invoke the remote operation.
           * <p> {@link
           * Find#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent, which owns the collection of installation releases Format:
         *        projects/{project}/installations/{installation}
           * @since 1.13
           */
          protected Find(java.lang.String parent) {
            super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFindReleaseResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/installations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Find set$Xgafv(java.lang.String $Xgafv) {
            return (Find) super.set$Xgafv($Xgafv);
          }

          @Override
          public Find setAccessToken(java.lang.String accessToken) {
            return (Find) super.setAccessToken(accessToken);
          }

          @Override
          public Find setAlt(java.lang.String alt) {
            return (Find) super.setAlt(alt);
          }

          @Override
          public Find setCallback(java.lang.String callback) {
            return (Find) super.setCallback(callback);
          }

          @Override
          public Find setFields(java.lang.String fields) {
            return (Find) super.setFields(fields);
          }

          @Override
          public Find setKey(java.lang.String key) {
            return (Find) super.setKey(key);
          }

          @Override
          public Find setOauthToken(java.lang.String oauthToken) {
            return (Find) super.setOauthToken(oauthToken);
          }

          @Override
          public Find setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Find) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Find setQuotaUser(java.lang.String quotaUser) {
            return (Find) super.setQuotaUser(quotaUser);
          }

          @Override
          public Find setUploadType(java.lang.String uploadType) {
            return (Find) super.setUploadType(uploadType);
          }

          @Override
          public Find setUploadProtocol(java.lang.String uploadProtocol) {
            return (Find) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent, which owns the collection of installation releases Format:
           * projects/{project}/installations/{installation}
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent, which owns the collection of installation releases Format:
         projects/{project}/installations/{installation}
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent, which owns the collection of installation releases Format:
           * projects/{project}/installations/{installation}
           */
          public Find setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/installations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Client-side computable APK hash (APKs only) */
          @com.google.api.client.util.Key
          private java.lang.String apkHash;

          /** Client-side computable APK hash (APKs only)
           */
          public java.lang.String getApkHash() {
            return apkHash;
          }

          /** Client-side computable APK hash (APKs only) */
          public Find setApkHash(java.lang.String apkHash) {
            this.apkHash = apkHash;
            return this;
          }

          /** IAS Artifact ID (AABs only) */
          @com.google.api.client.util.Key
          private java.lang.String iasArtifactId;

          /** IAS Artifact ID (AABs only)
           */
          public java.lang.String getIasArtifactId() {
            return iasArtifactId;
          }

          /** IAS Artifact ID (AABs only) */
          public Find setIasArtifactId(java.lang.String iasArtifactId) {
            this.iasArtifactId = iasArtifactId;
            return this;
          }

          /** versionCode on Android, CFBundleVersion on iOS (e.g. "456") */
          @com.google.api.client.util.Key("compositeBinaryId.buildVersion")
          private java.lang.String compositeBinaryIdBuildVersion;

          /** versionCode on Android, CFBundleVersion on iOS (e.g. "456")
           */
          public java.lang.String getCompositeBinaryIdBuildVersion() {
            return compositeBinaryIdBuildVersion;
          }

          /** versionCode on Android, CFBundleVersion on iOS (e.g. "456") */
          public Find setCompositeBinaryIdBuildVersion(java.lang.String compositeBinaryIdBuildVersion) {
            this.compositeBinaryIdBuildVersion = compositeBinaryIdBuildVersion;
            return this;
          }

          /** versionName on Android, CFBundleShortVersionString on iOS (e.g. "1.2.3") */
          @com.google.api.client.util.Key("compositeBinaryId.displayVersion")
          private java.lang.String compositeBinaryIdDisplayVersion;

          /** versionName on Android, CFBundleShortVersionString on iOS (e.g. "1.2.3")
           */
          public java.lang.String getCompositeBinaryIdDisplayVersion() {
            return compositeBinaryIdDisplayVersion;
          }

          /** versionName on Android, CFBundleShortVersionString on iOS (e.g. "1.2.3") */
          public Find setCompositeBinaryIdDisplayVersion(java.lang.String compositeBinaryIdDisplayVersion) {
            this.compositeBinaryIdDisplayVersion = compositeBinaryIdDisplayVersion;
            return this;
          }

          /**
           * Hash of binary on Android, modified hash excluding app metadata (e.g. provisioning
           * profile, version info) on iOS. NOTE - on iOS, releases with the same code but different
           * version numbers will have the same code_hash NOTE - ad-hoc iOS releases with the same
           * code but different provisioning profiles will have the same code_hash
           */
          @com.google.api.client.util.Key("compositeBinaryId.codeHash")
          private java.lang.String compositeBinaryIdCodeHash;

          /** Hash of binary on Android, modified hash excluding app metadata (e.g. provisioning profile, version
         info) on iOS. NOTE - on iOS, releases with the same code but different version numbers will have
         the same code_hash NOTE - ad-hoc iOS releases with the same code but different provisioning
         profiles will have the same code_hash
           */
          public java.lang.String getCompositeBinaryIdCodeHash() {
            return compositeBinaryIdCodeHash;
          }

          /**
           * Hash of binary on Android, modified hash excluding app metadata (e.g. provisioning
           * profile, version info) on iOS. NOTE - on iOS, releases with the same code but different
           * version numbers will have the same code_hash NOTE - ad-hoc iOS releases with the same
           * code but different provisioning profiles will have the same code_hash
           */
          public Find setCompositeBinaryIdCodeHash(java.lang.String compositeBinaryIdCodeHash) {
            this.compositeBinaryIdCodeHash = compositeBinaryIdCodeHash;
            return this;
          }

          @Override
          public Find set(String parameterName, Object value) {
            return (Find) super.set(parameterName, value);
          }
        }
        /**
         * List releases for an app by firebase installation id (FID)
         *
         * Create a request for the method "releases.list".
         *
         * This request holds the parameters needed by the firebaseapptesters server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent, which owns the collection of installation releases Format:
         *        projects/{project}/installations/{installation} Format: deprecated
         *        devices/{devices}/testerApps/{tester_app}/installations/{installation}
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListTesterAppInstallationReleasesResponse> {

          private static final String REST_PATH = "v1alpha/{+parent}/releases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/installations/[^/]+$");

          /**
           * List releases for an app by firebase installation id (FID)
           *
           * Create a request for the method "releases.list".
           *
           * This request holds the parameters needed by the the firebaseapptesters server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent, which owns the collection of installation releases Format:
         *        projects/{project}/installations/{installation} Format: deprecated
         *        devices/{devices}/testerApps/{tester_app}/installations/{installation}
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Firebaseapptesters.this, "GET", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaListTesterAppInstallationReleasesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/installations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent, which owns the collection of installation releases Format:
           * projects/{project}/installations/{installation} Format: deprecated
           * devices/{devices}/testerApps/{tester_app}/installations/{installation}
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent, which owns the collection of installation releases Format:
         projects/{project}/installations/{installation} Format: deprecated
         devices/{devices}/testerApps/{tester_app}/installations/{installation}
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent, which owns the collection of installation releases Format:
           * projects/{project}/installations/{installation} Format: deprecated
           * devices/{devices}/testerApps/{tester_app}/installations/{installation}
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/installations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Maximum number of releases to return */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Maximum number of releases to return
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Maximum number of releases to return */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Page token received from previous ListDevices call */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Page token received from previous ListDevices call
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Page token received from previous ListDevices call */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Feedback collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
         *   {@code Firebaseapptesters.Feedback.List request = firebaseapptesters.feedback().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Feedback feedback() {
          return new Feedback();
        }

        /**
         * The "feedback" collection of methods.
         */
        public class Feedback {

          /**
           * Commits the feedback
           *
           * Create a request for the method "feedback.commit".
           *
           * This request holds the parameters needed by the firebaseapptesters server.  After setting any
           * optional parameters, call the {@link Commit#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the feedback
           * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaCommitFeedbackRequest}
           * @return the request
           */
          public Commit commit(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaCommitFeedbackRequest content) throws java.io.IOException {
            Commit result = new Commit(name, content);
            initialize(result);
            return result;
          }

          public class Commit extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback> {

            private static final String REST_PATH = "v1alpha/{+name}:commit";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/installations/[^/]+/releases/[^/]+/feedback/[^/]+$");

            /**
             * Commits the feedback
             *
             * Create a request for the method "feedback.commit".
             *
             * This request holds the parameters needed by the the firebaseapptesters server.  After setting
             * any optional parameters, call the {@link Commit#execute()} method to invoke the remote
             * operation. <p> {@link
             * Commit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the feedback
             * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaCommitFeedbackRequest}
             * @since 1.13
             */
            protected Commit(java.lang.String name, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaCommitFeedbackRequest content) {
              super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/installations/[^/]+/releases/[^/]+/feedback/[^/]+$");
              }
            }

            @Override
            public Commit set$Xgafv(java.lang.String $Xgafv) {
              return (Commit) super.set$Xgafv($Xgafv);
            }

            @Override
            public Commit setAccessToken(java.lang.String accessToken) {
              return (Commit) super.setAccessToken(accessToken);
            }

            @Override
            public Commit setAlt(java.lang.String alt) {
              return (Commit) super.setAlt(alt);
            }

            @Override
            public Commit setCallback(java.lang.String callback) {
              return (Commit) super.setCallback(callback);
            }

            @Override
            public Commit setFields(java.lang.String fields) {
              return (Commit) super.setFields(fields);
            }

            @Override
            public Commit setKey(java.lang.String key) {
              return (Commit) super.setKey(key);
            }

            @Override
            public Commit setOauthToken(java.lang.String oauthToken) {
              return (Commit) super.setOauthToken(oauthToken);
            }

            @Override
            public Commit setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Commit) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Commit setQuotaUser(java.lang.String quotaUser) {
              return (Commit) super.setQuotaUser(quotaUser);
            }

            @Override
            public Commit setUploadType(java.lang.String uploadType) {
              return (Commit) super.setUploadType(uploadType);
            }

            @Override
            public Commit setUploadProtocol(java.lang.String uploadProtocol) {
              return (Commit) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the feedback */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the feedback
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the feedback */
            public Commit setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/installations/[^/]+/releases/[^/]+/feedback/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Commit set(String parameterName, Object value) {
              return (Commit) super.set(parameterName, value);
            }
          }
          /**
           * Create new feedback for a release
           *
           * Create a request for the method "feedback.create".
           *
           * This request holds the parameters needed by the firebaseapptesters server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent resource that owns the feedback Format:
           *        projects/{project}/installations/{installation}/releases/{release}
           * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback> {

            private static final String REST_PATH = "v1alpha/{+parent}/feedback";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/installations/[^/]+/releases/[^/]+$");

            /**
             * Create new feedback for a release
             *
             * Create a request for the method "feedback.create".
             *
             * This request holds the parameters needed by the the firebaseapptesters server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent resource that owns the feedback Format:
           *        projects/{project}/installations/{installation}/releases/{release}
             * @param content the {@link com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback content) {
              super(Firebaseapptesters.this, "POST", REST_PATH, content, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleFirebaseApptestersV1alphaFeedback.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/installations/[^/]+/releases/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent resource that owns the feedback Format:
             * projects/{project}/installations/{installation}/releases/{release}
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent resource that owns the feedback Format:
           projects/{project}/installations/{installation}/releases/{release}
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent resource that owns the feedback Format:
             * projects/{project}/installations/{installation}/releases/{release}
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/installations/[^/]+/releases/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * An accessor for creating requests from the V1alpha collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Firebaseapptesters firebaseapptesters = new Firebaseapptesters(...);}
   *   {@code Firebaseapptesters.V1alpha.List request = firebaseapptesters.v1alpha().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public V1alpha v1alpha() {
    return new V1alpha();
  }

  /**
   * The "v1alpha" collection of methods.
   */
  public class V1alpha {

    /**
     * Delete all devices
     *
     * Create a request for the method "v1alpha.deleteDevices".
     *
     * This request holds the parameters needed by the firebaseapptesters server.  After setting any
     * optional parameters, call the {@link DeleteDevices#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public DeleteDevices deleteDevices() throws java.io.IOException {
      DeleteDevices result = new DeleteDevices();
      initialize(result);
      return result;
    }

    public class DeleteDevices extends FirebaseapptestersRequest<com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty> {

      private static final String REST_PATH = "v1alpha/devices";

      /**
       * Delete all devices
       *
       * Create a request for the method "v1alpha.deleteDevices".
       *
       * This request holds the parameters needed by the the firebaseapptesters server.  After setting
       * any optional parameters, call the {@link DeleteDevices#execute()} method to invoke the remote
       * operation. <p> {@link DeleteDevices#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @since 1.13
       */
      protected DeleteDevices() {
        super(Firebaseapptesters.this, "DELETE", REST_PATH, null, com.google.api.services.firebaseapptesters.v1alpha.model.GoogleProtobufEmpty.class);
      }

      @Override
      public DeleteDevices set$Xgafv(java.lang.String $Xgafv) {
        return (DeleteDevices) super.set$Xgafv($Xgafv);
      }

      @Override
      public DeleteDevices setAccessToken(java.lang.String accessToken) {
        return (DeleteDevices) super.setAccessToken(accessToken);
      }

      @Override
      public DeleteDevices setAlt(java.lang.String alt) {
        return (DeleteDevices) super.setAlt(alt);
      }

      @Override
      public DeleteDevices setCallback(java.lang.String callback) {
        return (DeleteDevices) super.setCallback(callback);
      }

      @Override
      public DeleteDevices setFields(java.lang.String fields) {
        return (DeleteDevices) super.setFields(fields);
      }

      @Override
      public DeleteDevices setKey(java.lang.String key) {
        return (DeleteDevices) super.setKey(key);
      }

      @Override
      public DeleteDevices setOauthToken(java.lang.String oauthToken) {
        return (DeleteDevices) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteDevices setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteDevices) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteDevices setQuotaUser(java.lang.String quotaUser) {
        return (DeleteDevices) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteDevices setUploadType(java.lang.String uploadType) {
        return (DeleteDevices) super.setUploadType(uploadType);
      }

      @Override
      public DeleteDevices setUploadProtocol(java.lang.String uploadProtocol) {
        return (DeleteDevices) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public DeleteDevices set(String parameterName, Object value) {
        return (DeleteDevices) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Firebaseapptesters}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Firebaseapptesters}. */
    @Override
    public Firebaseapptesters build() {
      return new Firebaseapptesters(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseapptestersRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseapptestersRequestInitializer(
        FirebaseapptestersRequestInitializer firebaseapptestersRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebaseapptestersRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
